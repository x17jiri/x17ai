//------------------------------------------------------------------------------
//
// Copyright 2025 Jiri Bobek. All rights reserved.
// License: GPL 3.0 or later. See LICENSE.txt for details.
//
//------------------------------------------------------------------------------

use super::super::rms_norm::*;
use super::super::skip_connection::*;

use crate::debug_2d;
use crate::nn::EvalContext;
use crate::nn::layers::Layer;
use crate::tensor::device::cpu::CPUDevice;
use crate::tensor::{self, Tensor};

// Note: The expected tensors were generated by gen_test_data.py

#[test]
fn test_skip_con() {
	let skip_con = SkipConnection::new(RMSNorm::new(5, 1e-5));
	let dev = CPUDevice::new("CPU".to_string());

	#[rustfmt::skip] let inp = Tensor::new_debug_2d(
		dev.clone(),
		debug_2d![
			f32;
			[-1.2719, -0.6884, -0.6477, -1.3343, -1.7648],
			[-1.9440,  0.9989,  2.8260, -0.3503, -0.5406],
			[ 0.1619, -0.9744, -0.6539,  1.9764,  0.7423],
			[ 0.0689,  1.1983,  0.0077, -0.6580, -0.4917],
		]
	);

	#[rustfmt::skip] let expected_out = Tensor::new_debug_2d(
		dev.clone(),
		debug_2d![
			f32;
			[-2.3170, -1.2540, -1.1799, -2.4306, -3.2149],
			[-3.1414,  1.6142,  4.5667, -0.5661, -0.8736],
			[ 0.3114, -1.8744, -1.2579,  3.8019,  1.4279],
			[ 0.1748,  3.0405,  0.0195, -1.6696, -1.2476],
		]
	);

	let mut ctx = EvalContext::new(true);
	let out = skip_con.forward(inp.clone(), &mut ctx);

	assert!(tensor::math::approx_eq(&out, &expected_out, 1e-4));

	#[rustfmt::skip] let d_out = Tensor::new_debug_2d(
		dev.clone(),
		debug_2d![
			f32;
			[ 0.1000,  0.2000, -0.3000, -0.1000,  0.7000],
			[ 0.0500, -0.1500,  0.1000,  0.0000,  0.6500],
			[-0.2000,  0.1000,  0.0500,  0.0500,  0.3331],
			[ 0.0000,  0.1000, -0.0500, -0.0500, -0.1442],
		]
	);

	#[rustfmt::skip] let expected_d_inp = Tensor::new_debug_2d(
		dev.clone(),
		debug_2d![
			f32;
			[ 0.0167,  0.2748, -0.6308, -0.3557,  1.0456],
			[ 0.0521, -0.2276,  0.2033, -0.0052,  1.0424],
			[-0.3894,  0.2206,  0.1151,  0.0390,  0.6193],
			[-0.0112,  0.0593, -0.1281, -0.0201, -0.2861],
		]
	);

	let d_inp = skip_con.backward(d_out.clone(), &mut ctx);

	println!("d_inp = {d_inp}");
	println!("expected_d_inp = {expected_d_inp}");

	assert!(tensor::math::approx_eq(&d_inp, &expected_d_inp, 1e-4));
}
